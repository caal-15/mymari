{"version":3,"sources":["ThoughtCard/ThoughtCard.module.sass","ThoughtsPage/ThoughtsPage.module.sass","ThoughtCard/index.js","ThoughtCard/ThoughtCard.js","utils.js","ThoughtsPage/index.js","ThoughtsPage/ThoughtsPage.js","NumberedThoughtsPage/index.js","NumberedThoughtsPage/NumberedThoughtsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ThoughtCard","title","body","footnote","className","styles","thoughtCard","getRandomNumber","upperLimit","Math","floor","random","ThoughtsPage","useState","data","length","page","setPage","visitedPages","setVisitedPages","useEffect","some","visitedPage","thoughtItem","onClick","newPage","getUnvisitedPage","main","NumberedThoughtsPage","useParams","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,YAAc,mC,mBCAhCD,EAAOC,QAAU,CAAC,KAAO,6B,gKCCVC,ECEK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,SAAhB,OAClB,yBAAKC,UAAWC,IAAOC,aACrB,4BAAKL,GACL,2BAAIC,GACJ,mCAASC,K,OCRAI,EAAkB,SAACC,GAAD,OAC7BC,KAAKC,MAAMD,KAAKE,SAAWH,I,iBCCdI,ECMM,WAAO,IAAD,EACDC,mBAASN,EAAgBO,EAAKC,SAD7B,mBAClBC,EADkB,KACZC,EADY,OAEeJ,mBAAS,IAFxB,mBAElBK,EAFkB,KAEJC,EAFI,KAIzBC,qBAAU,WACHF,EAAaG,MAAK,SAACC,GAAD,OAAiBA,IAAgBN,MACtDG,EAAgB,GAAD,mBAAKD,GAAL,CAAmBF,OAEnC,CAACA,EAAME,EAAcC,IAExB,IAaMI,EAAcT,EAAKE,GACzB,OACE,0BAAMQ,QAAS,kBAAMP,EAfE,WACvB,IAAIQ,EAAUlB,EAAgBO,EAAKC,QACnC,GAAIG,EAAaH,OAASD,EAAKC,OAAQ,CACrC,KAAOG,EAAaG,MAAK,SAACL,GAAD,OAAUA,IAASS,MAC1CA,EAAUlB,EAAgBO,EAAKC,QAEjC,OAAOU,EAGP,OADAN,EAAgB,IACTM,EAMoBC,KAAqBtB,UAAWC,IAAOsB,MAClE,kBAAC,EAAgBJ,KChCRK,ECIc,WAC3B,IACMZ,EADaa,cACKb,MAAQ,EAE1BO,EAAcT,EAAKE,GAEzB,OAAO,kBAAC,EAAgBO,ICGXO,EATH,kBACV,kBAAC,IAAD,CAAeC,SAAUC,WACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOsB,KAAK,kBAAkBC,UAAWP,OCE3BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a0022ef7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"thoughtCard\":\"ThoughtCard_thoughtCard__mqPDj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"ThoughtsPage_main__1T-JJ\"};","import ThoughtCard from './ThoughtCard'\n\nexport default ThoughtCard\n","import React from 'react'\n\nimport styles from './ThoughtCard.module.sass'\n\nconst ThoughtCard = ({ title, body, footnote }) => (\n  <div className={styles.thoughtCard}>\n    <h1>{title}</h1>\n    <p>{body}</p>\n    <span>- {footnote}</span>\n  </div>\n)\n\nexport default ThoughtCard\n","export const getRandomNumber = (upperLimit) =>\n  Math.floor(Math.random() * upperLimit)\n","import ThoughtsPage from './ThoughtsPage'\n\nexport default ThoughtsPage\n","import React, { useState, useEffect } from 'react'\n\nimport ThoughtCard from '../ThoughtCard'\nimport data from './data.json'\nimport { getRandomNumber } from '../utils'\n\nimport styles from './ThoughtsPage.module.sass'\n\nconst ThoughtsPage = () => {\n  const [page, setPage] = useState(getRandomNumber(data.length))\n  const [visitedPages, setVisitedPages] = useState([])\n\n  useEffect(() => {\n    if (!visitedPages.some((visitedPage) => visitedPage === page)) {\n      setVisitedPages([...visitedPages, page])\n    }\n  }, [page, visitedPages, setVisitedPages])\n\n  const getUnvisitedPage = () => {\n    let newPage = getRandomNumber(data.length)\n    if (visitedPages.length < data.length) {\n      while (visitedPages.some((page) => page === newPage)) {\n        newPage = getRandomNumber(data.length)\n      }\n      return newPage\n    } else {\n      setVisitedPages([])\n      return newPage\n    }\n  }\n\n  const thoughtItem = data[page]\n  return (\n    <main onClick={() => setPage(getUnvisitedPage())} className={styles.main}>\n      <ThoughtCard {...thoughtItem} />\n    </main>\n  )\n}\n\nexport default ThoughtsPage\n","import NumberedThoughtsPage from './NumberedThoughtsPage'\n\nexport default NumberedThoughtsPage\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport data from '../ThoughtsPage/data.json'\nimport ThoughtCard from '../ThoughtCard'\n\nconst NumberedThoughtsPage = () => {\n  const pathParams = useParams()\n  const page = pathParams.page || 0\n\n  const thoughtItem = data[page]\n\n  return <ThoughtCard {...thoughtItem} />\n}\n\nexport default NumberedThoughtsPage\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport ThoughtsPage from './ThoughtsPage'\nimport NumberedThoughtsPage from './NumberedThoughtsPage'\n\nconst App = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={ThoughtsPage} />\n      <Route path=\"/numbered/:page\" component={NumberedThoughtsPage} />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}